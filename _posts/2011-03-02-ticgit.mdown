---
layout: post
title: "An Aside: TicGit"
updated: 2011-03-06T18:39:00-06:00
categories:
- git
- ticgit
- ticket
---
[Larkware Shots](http://larkware.com/shots) recently mentioned
[TicGit](https://github.com/jeffWelling/ticgit), a Git-based ticket system that keeps all of your
tickets in their own branch of your code's repository. That doesn't make sense for large projects
with multiple repositories[^fn1] but for my little learning exercise here, it should work just fine.

## Installing TicGit

Installing TicGit is straightforward: install the `git` and `TicGit-ng` gems.

## Using TicGit

All of TicGit's functions are accessed through the `ti` command, similar to Git itself.

To create a ticket:

{% highlight sh %}
    $ ti new
{% endhighlight %}

As with Git, if you don't specify a message on the command line, you're thrown into your
editor (in my case, Vim[^fn2]). Of whatever text you enter, the first line is taken as
the ticket's title and the rest is the initial comment. Tags can be entered on the `tags:` line.

{% highlight sh %}
    User can enter a new book
    When the user goes to the new book page, enters a name and description, and
    presses "Create", she should be returned to the list page and see the book
    she just entered.
    # ---
    tags: story
    # first line will be the title of the tic, the rest will be the first comment
    # if you would like to add initial tags, put them on the 'tags:' line, comma delim
{% endhighlight %}

We'll use this ticket as our starting point for behavior driven development.

[^fn1]: At least, it doesn't make sense to me. I come from an enterprise Java background,
        and I'm still learning The Git Way.

[^fn2]: Don't go there. Just... just don't.
